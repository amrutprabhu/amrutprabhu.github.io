{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var o=a=>c(a,\"__esModule\",{value:!0});var g=(a,s)=>()=>(s||a((s={exports:{}}).exports,s),s.exports),k=(a,s)=>{o(a);for(var i in s)c(a,i,{get:s[i],enumerable:!0})},N=(a,s,i)=>{if(s&&typeof s==\"object\"||typeof s==\"function\")for(let n of p(s))!m.call(a,n)&&n!==\"default\"&&c(a,n,{get:()=>s[n],enumerable:!(i=h(s,n))||i.enumerable});return a},f=a=>N(o(c(a!=null?d(u(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var r=g((_,l)=>{l.exports=_jsx_runtime});var P={};k(P,{default:()=>y,frontmatter:()=>w});var e=f(r()),w={title:\"Monitoring Spring Boot Application with Prometheus and Grafana\",author:\"Amrut Prabhu\",categories:\"\",tags:[\"Spring Boot\",\"Java\",\"Prometheus\",\"Grafana\",\"APM\"],image:\"2022/spring-boot-prometheus-grafana/cover.jpg\",\"photo-credits\":null,\"applaud-link\":\"2021/spring-boot-stream-kafka.json\",date:\"2022-06-16\",draft:!1,summary:\" In this article, we will be looking into how we can monitor our Spring Boot application using Grafana. We would be looking into the whole setup and create a simple dashboard to view some metrics.\",imageUrl:\"/static/images/2022/spring-boot-prometheus-grafana/cover.jpg\",actualUrl:\"auto-generated\",customUrl:\"auto-generated\"};function b(a={}){let{wrapper:s}=a.components||{};return s?(0,e.jsx)(s,Object.assign({},a,{children:(0,e.jsx)(i,{})})):i();function i(){let n=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",div:\"div\",h3:\"h3\"},a.components),{Image:t}=n;return t||v(\"Image\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"In this article, we will be looking into how we can monitor our Spring Boot application using Grafana. We would be looking into the whole setup and create a simple dashboard to view some metrics.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"introduction\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#introduction\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Introduction\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Every application that is deployed on production needs some kind of monitoring to see how the application is performing. This will give you some insights on whether the application is performing as aspected or if you would need to take some action in order to obtain the desired level of performance. In the modern world, this data is called Application Performance Metrics (APM). Now there are quite many commercial tools like \",(0,e.jsx)(n.a,{href:\"https://newrelic.com/\",children:\"Newrelic\"}),\", \",(0,e.jsx)(n.a,{href:\"https://www.datadoghq.com/product/apm/\",children:\"Datadog APM\"}),\", etc. which are SAAS services providing such capabilities.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Today we will be looking at two open-source tools called \",(0,e.jsx)(n.a,{href:\"https://grafana.com/\",children:\"Grafana\"}),\" and \",(0,e.jsx)(n.a,{href:\"https://prometheus.io/\",children:\"Prometheus\"}),\". Prometheus gathers and stores metrics data in a time series format while Grafana uses Prometheus as a data source to visualize the data on dashboards.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"With this, Let\\u2019s start by creating an application and monitor it using Grafana.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"creating-a-spring-boot-application\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#creating-a-spring-boot-application\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Creating a Spring Boot Application\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Let\\u2019s go to \",(0,e.jsx)(n.a,{href:\"https://start.spring.io\",children:\"https://start.spring.io\"}),\" and create a simple application with the following dependencies.\"]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Spring Boot Actuator (Ops)\"}),`\n`,(0,e.jsx)(n.li,{children:\"Prometheus (Observability)\"}),`\n`,(0,e.jsx)(n.li,{children:\"Spring Web (Optional: only to create a simple REST controller.)\"}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Next, we need to expose an actuator endpoint through which Prometheus will collect metrics data in the format that Prometheus understands. For this, we need to add the following properties.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-yaml\",children:(0,e.jsxs)(n.code,{className:\"language-yaml code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"management\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"endpoints\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"web\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"exposure\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"include\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"          \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),` prometheus\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Next, Let\\u2019s add a simple controller that will produce some warning logs. We will use this to monitor the number of warnings we are getting.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-java\",children:(0,e.jsxs)(n.code,{className:\"language-java code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@RestController\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@SpringBootApplication\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"public\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"class\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"PrometheusIntegrationApplication\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"final\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"static\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Logger\"}),\" logger \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"LoggerFactory\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"getLogger\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"PrometheusIntegrationApplication\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token keyword\",children:\"class\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"public\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"static\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"void\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"main\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" args\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"SpringApplication\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"run\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"PrometheusIntegrationApplication\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token keyword\",children:\"class\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" args\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@GetMapping\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"/something\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"public\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"ResponseEntity\"}),(0,e.jsxs)(n.span,{className:\"token generics\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\">\"})]}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"createLogs\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        logger\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"warn\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"Just checking\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"ResponseEntity\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"ok\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"body\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"All Ok\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"With this, Let\\u2019s start the application and open the following URL.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-shell\",children:(0,e.jsx)(n.code,{className:\"language-shell code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`http://localhost:8080/actuator/prometheus\n`})})}),`\n`,(0,e.jsxs)(n.h2,{id:\"understanding-the-metics-data\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#understanding-the-metics-data\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Understanding the Metics data\"]}),`\n`,(0,e.jsx)(n.p,{children:\"After opening the above endpoint, you will find some metrics data in the following format\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-shell\",children:(0,e.jsx)(n.code,{className:\"language-shell code-highlight\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"jvm_memory_used_bytes\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),\"area\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"heap\"'}),\",id\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"G1 Survivor Space\"'}),\",\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1005592.0\"}),`\n`]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The first part i.e \",(0,e.jsx)(n.code,{children:\"jvm_memory_used_bytes\"}),\" is called the label, while the fields inside the curly braces are called attributes. Each of these labels represents a particular metric and the attribute provides you with a way to query so that you can get the values.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Next, Let's configure Prometheus to read this data.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"configuring-prometheus\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#configuring-prometheus\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Configuring Prometheus\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"To start Prometheus, we will be using a Prometheus docker image and provide it with some configuration to gather the metrics data from our application. It does so by creating jobs that will scrape data from an endpoint. So let\\u2019s define the job in the \",(0,e.jsx)(n.code,{children:\"prometheus.yaml\"}),\"configuration file as below.\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-yaml\",children:(0,e.jsxs)(n.code,{className:\"language-yaml code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"scrape_configs\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\" \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"job_name\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'Spring Boot Application input'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"metrics_path\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'/actuator/prometheus'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"scrape_interval\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),` 2s\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"static_configs\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\" \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"targets\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'localhost:8000'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"labels\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"          \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"application\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'My Spring Boot Application'\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Here, I have defined a job that will call the actuator endpoint on our application every 2 seconds to get the metrics data.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Next, Let's create a docker-compose file that will bring the Prometheus docker image up and running.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-yaml\",children:(0,e.jsxs)(n.code,{className:\"language-yaml code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"services\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"prometheus\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"image\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" prom/prometheus\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`v2.35.0\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"network_mode\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),` host\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"container_name\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),` prometheus\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"restart\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" unless\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),`stopped\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"volumes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\" ./data/prometheus/config\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`/etc/prometheus/\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"command\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'--config.file=/etc/prometheus/prometheus.yaml'\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Here, we have the config file mounted at the location \",(0,e.jsx)(n.code,{children:\"/etc/prometheus\"}),\" and we use the location of the config file as an argument to the command. For simplicity, we are using the host network mode, so that Prometheus can access our application endpoint directly.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"With this, let\\u2019s start the docker image with \",(0,e.jsx)(n.code,{children:\"docker compose up\"}),\" and open the URL \",(0,e.jsx)(n.code,{children:\"http://localhost:9090\"}),\" on our browser.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now let's search for the label \",(0,e.jsx)(n.code,{children:\"logback_events_total\"})]}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(t,{alt:\"Prometheus view\",src:\"/static/images/2022/spring-boot-prometheus-grafana/prometheus-logback.png\",width:\"956\",height:\"466\"})}),`\n`,(0,e.jsx)(n.p,{children:\"As you can see, we get to see the metric that Prometheus gathered at a particular time.\"}),`\n`,(0,e.jsx)(n.p,{children:\"In case you don't find the label, You can check if the job is running by navigating to \\u201CStatus > Targets\\u201D. You should see the state as \\u201CUP\\u201D like this.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(t,{alt:\"Prometheus Targets\",src:\"/static/images/2022/spring-boot-prometheus-grafana/prometheus-targets.png\",width:\"956\",height:\"466\"})}),`\n`,(0,e.jsx)(n.p,{children:\"So with this, the data is getting ingested into Prometheus every 2 seconds.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Now let's visualize this using Grafana.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"visualizing-metrics-in-grafana\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#visualizing-metrics-in-grafana\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Visualizing Metrics in Grafana\"]}),`\n`,(0,e.jsx)(n.p,{children:\"We are going to be using Grafana\\u2019s docker image and let\\u2019s add it to the docker-compose file.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-yaml\",children:(0,e.jsxs)(n.code,{className:\"language-yaml code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"grafana\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"image\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" grafana/grafana\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\"oss\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`8.5.2\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"pull_policy\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),` always\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"network_mode\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),` host\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"container_name\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),` grafana\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"restart\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" unless\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),`stopped\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"links\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\" prometheus\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`prometheus\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"volumes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\" ./data/grafana\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`/var/lib/grafana\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"environment\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),` GF_SECURITY_ADMIN_PASSWORD=admin\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),` GF_SERVER_DOMAIN=localhost\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Here also we are making use of the host network mode, to make it easy for us and Grafana to access the Prometheus endpoint.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Next, let's open the URL \",(0,e.jsx)(n.code,{children:\"http://localhost:3000\"}),\" and access Grafana using the username and password as \\u201Cadmin\\u201D\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"configuring-grafana-data-source\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#configuring-grafana-data-source\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Configuring Grafana Data Source\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Let\\u2019s first add the Prometheus data source. To do that, Navigate to \\u201Cadd a data source\\u201D and select Prometheus. Then you need to only add a single property i.e the Prometheus URL \",(0,e.jsx)(n.a,{href:\"http://localhost:9090.\",children:\"http://localhost:9090.\"})]}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(t,{alt:\"Prometheus Targets\",src:\"/static/images/2022/spring-boot-prometheus-grafana/prometheus-data-source.png\",width:\"953\",height:\"635\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Click \\u201CSave and test\\u201D and now, let's create our first Dashboard\"}),`\n`,(0,e.jsxs)(n.h3,{id:\"creating-grafana-dashboard\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#creating-grafana-dashboard\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Creating Grafana Dashboard\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Click on the \\u201C+\\u201D icon on the left and then select \\u201CCreate Dashboard\\u201D. Now let's add our first Panel.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Next, let's query for a label in the metric browser i.e \",(0,e.jsx)(n.code,{children:\"logback_events_total\"})]}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(t,{alt:\"grafana simple query\",src:\"/static/images/2022/spring-boot-prometheus-grafana/logbac-simple-query.png\",width:\"956\",height:\"674\"})}),`\n`,(0,e.jsx)(n.p,{children:\"As you can see here, we get counts of all types of logs. These counts are currently from our application\\u2019s startup logs and are shown in a time-series format.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Let\\u2019s drill down to only view the warning logs. For this, we would have to add the attribute \",(0,e.jsx)(n.code,{children:\"level=\\u201Dwarn\\u201D\"}),\" as below.\"]}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(t,{alt:\"Grafana Warning logs\",src:\"/static/images/2022/spring-boot-prometheus-grafana/logback-warn-logs.png\",width:\"956\",height:\"674\"})}),`\n`,(0,e.jsx)(n.p,{children:\"That's it. We just created a simple metric visualization panel to view the number of warning logs.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now usually, we would like to view the rate of errors or warning logs over a certain period of time. This will help us to understand if there is some problem in our system. For this, we can use the \",(0,e.jsx)(n.code,{children:\"rate\"}),\" function to calculate the rate of logs over a particular period of time.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"So after triggering the controller endpoint on our spring boot application, it generated some warning logs, that led to this graph.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(t,{alt:\"Grafana warning logs rate\",src:\"/static/images/2022/spring-boot-prometheus-grafana/logback-warn-rate.png\",width:\"956\",height:\"674\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Let\\u2019s save this panel and there we go. We just created our first Grafana Dashboard with warning logs metric panel.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(t,{alt:\"Grafana Sample Dashboard Targets\",src:\"/static/images/2022/spring-boot-prometheus-grafana/saved-panel.png\",width:\"956\",height:\"528\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now, We don\\u2019t need to create dashboards from scratch. Rather there are quite many community-provided dashboards. This is what I really liked. Hence you can use a full-fledged dashboard for spring boot applications from \",(0,e.jsx)(n.a,{href:\"https://grafana.com/grafana/dashboards/6756\",children:\"here\"}),\". However, I did find some problems while trying to use it as data was not getting visualized properly. So I updated the dashboard and you can find the JSON to the dashboard in my GitHub repo \",(0,e.jsx)(n.a,{href:\"https://github.com/amrutprabhu/grafana-prometheus/blob/main/Spring%20Boot%20Statistics%20Dashboard.json\",children:\"here\"}),\".\"]}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(t,{alt:\"Grafana full fledged dashboard\",src:\"/static/images/2022/spring-boot-prometheus-grafana/spring-boot-application-metrics-view.png\",width:\"956\",height:\"969\"})}),`\n`,(0,e.jsxs)(n.h2,{id:\"conclusion\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#conclusion\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),`\n`,(0,e.jsx)(n.p,{children:\"In this article, we saw how we can monitor a Spring Boot application\\u2019s performance using Prometheus and Grafana. In My next article, we will be looking into Alerting on a certain event using Grafana.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"You can find the complete code and Dashboard Json on my GitHub repo \",(0,e.jsx)(n.a,{href:\"https://github.com/amrutprabhu/grafana-prometheus\",children:\"here\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"I keep exploring and learning new things. If you want to know the latest trends and improve your software development skills, then subscribe to my newsletter below and also follow me on \",(0,e.jsx)(n.a,{href:\"https://twitter.com/amrutprabhu42\",children:\"Twitter\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Enjoy!!\"})]})}}var y=b;function v(a,s){throw new Error(\"Expected \"+(s?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return P;})();\n;return Component;","toc":[{"value":"Introduction","url":"#introduction","depth":2},{"value":"Creating a Spring Boot Application","url":"#creating-a-spring-boot-application","depth":2},{"value":"Understanding the Metics data","url":"#understanding-the-metics-data","depth":2},{"value":"Configuring Prometheus","url":"#configuring-prometheus","depth":2},{"value":"Visualizing Metrics in Grafana","url":"#visualizing-metrics-in-grafana","depth":2},{"value":"Configuring Grafana Data Source","url":"#configuring-grafana-data-source","depth":3},{"value":"Creating Grafana Dashboard","url":"#creating-grafana-dashboard","depth":3},{"value":"Conclusion","url":"#conclusion","depth":2}],"frontMatter":{"readingTime":{"text":"8 min read","minutes":7.555,"time":453300,"words":1511},"slug":"2022/spring-boot-prometheus-grafana","fileName":"2022/spring-boot-prometheus-grafana.md","title":"Monitoring Spring Boot Application with Prometheus and Grafana","author":"Amrut Prabhu","categories":"","tags":["Spring Boot","Java","Prometheus","Grafana","APM"],"image":"2022/spring-boot-prometheus-grafana/cover.jpg","photo-credits":null,"applaud-link":"2021/spring-boot-stream-kafka.json","date":"2022-06-16T00:00:00.000Z","draft":false,"summary":" In this article, we will be looking into how we can monitor our Spring Boot application using Grafana. We would be looking into the whole setup and create a simple dashboard to view some metrics.","imageUrl":"/static/images/2022/spring-boot-prometheus-grafana/cover.jpg","actualUrl":"2022/spring-boot-prometheus-grafana","customUrl":"spring-boot-prometheus-grafana"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.875,"time":52500,"words":175},"slug":["default"],"fileName":"default.md","name":"Amrut Prabhu","avatar":"/static/images/avatar-small.jpg","avatarBig":"/static/images/avatar-big.jpg","occupation":"Staff Engineer","company":"Personal","email":"contact@refactorfirst.com","twitter":"https://twitter.com/amrutprabhu42","linkedin":"https://www.linkedin.com/in/amrut-prabhu-722baa65/","github":"https://github.com/amrutprabhu","customUrl":"default","actualUrl":"default","date":null}],"prev":{"title":"How to Create A Cryptocurrency Wallet With Web3","author":"Amrut Prabhu","categories":"","tags":["Cryptocurrency","Ethereum","Web3","Smart Contract","Ganache","ReactJS"],"photo-credits":"https://unsplash.com/photos/aFdTdWYXFd0","applaud-link":"2021/todo.json","date":"2022-04-28T00:00:00.000Z","draft":false,"summary":"In this article, we will be creating a React app to view your crypto balance and transfer tokens from your account to another account.","imageUrl":"/static/images/2022/create-cryptocurrency-wallet-with-web3/cover.jpg","actualUrl":"2022/create-cryptocurrency-wallet-with-web3","customUrl":"create-cryptocurrency-wallet-with-web3","slug":"create-cryptocurrency-wallet-with-web3"},"next":null},"__N_SSG":true}