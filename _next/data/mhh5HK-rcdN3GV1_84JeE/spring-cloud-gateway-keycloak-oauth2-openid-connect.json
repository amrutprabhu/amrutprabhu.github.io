{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var h=Object.create;var c=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var l=a=>c(a,\"__esModule\",{value:!0});var k=(a,t)=>()=>(t||a((t={exports:{}}).exports,t),t.exports),g=(a,t)=>{l(a);for(var s in t)c(a,s,{get:t[s],enumerable:!0})},N=(a,t,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of p(t))!m.call(a,n)&&n!==\"default\"&&c(a,n,{get:()=>t[n],enumerable:!(s=d(t,n))||s.enumerable});return a},y=a=>N(l(c(a!=null?h(u(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var r=k((O,o)=>{o.exports=_jsx_runtime});var I={};g(I,{default:()=>v,frontmatter:()=>w});var e=y(r()),w={title:\"Spring Cloud Gateway Keycloak OAuth2 OIDC Integration\",author:\"Amrut Prabhu\",categories:\"\",tags:[\"Spring Boot\",\"Java\",\"Gateway\",\"Keycloak\",\"Oauth2\",\"OpenId Connect\"],\"photo-credits\":\"\",\"applaud-link\":\"2021/spring-gateway-oauth2-keycloak.json\",date:\"2021-09-02\",draft:!1,summary:\"In this article, we would be looking at how we can integrate Keycloak with Spring Cloud Gateway using the OAuth2 OpenId Connect (OIDC).\",imageUrl:\"/static/images/2021/spring-cloud-gateway-with-keycloak/cover.jpg\",actualUrl:\"auto-generated\",customUrl:\"auto-generated\"};function f(a={}){let{wrapper:t}=a.components||{};return t?(0,e.jsx)(t,Object.assign({},a,{children:(0,e.jsx)(s,{})})):s();function s(){let n=Object.assign({p:\"p\",h1:\"h1\",a:\"a\",span:\"span\",code:\"code\",div:\"div\",pre:\"pre\",ul:\"ul\",li:\"li\",h2:\"h2\",strong:\"strong\"},a.components),{Image:i}=n;return i||b(\"Image\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"In this article, we would be looking at how we can integrate Keycloak with Spring Cloud Gateway using the OAuth2 OpenId Connect (OIDC).\"}),`\n`,(0,e.jsxs)(n.h1,{id:\"introduction\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#introduction\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Introduction\"]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\"https://www.keycloak.org/\",children:\"Keycloak\"}),\" is an open-source application, which provides identity and access management. It is sponsored by Redhat, whose commercial product is \",(0,e.jsx)(n.a,{href:\"https://access.redhat.com/products/red-hat-single-sign-on\",children:\"Red Hat Single Sign-On (RH-SSO)\"}),\" based on Keycloak.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Keycloak supports various features out of the box like user registration, social media logins, 2-factor authentication, LDAP integration, etc. Apart from its various integration, it also provides some easy ways to customize user login UIs, forgot password option, email login option, etc with just a click of a button. You can read more about this in their documentation \",(0,e.jsx)(n.a,{href:\"https://www.keycloak.org/docs/latest/server_admin/\",children:\"here\"})]}),`\n`,(0,e.jsxs)(n.h1,{id:\"understanding-keycloak-concepts\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#understanding-keycloak-concepts\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Understanding Keycloak Concepts\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Now to understand Keycloak, we need to know some key concepts. Let\\u2019s have a look at that.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"When you log in for the first time you would land up in a \",(0,e.jsx)(n.code,{children:\"master\"}),\" realm.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"What is a realm?\"}),`\n`,(0,e.jsx)(n.p,{children:\"A realm is a holder of users and applications belonging to a single identity and access management. You can create multiple realms to handle multiple identities and access management. These custom reals are managed by the master real which is the admin realm for Keycloak.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Keycloak realms\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/keycloack-realms.png\",width:\"903\",height:\"418\"})}),`\n`,(0,e.jsx)(n.p,{children:\"The applications in one realm cannot access users of another realm. Here we refer to the applications as the clients who want to access some user details.\"}),`\n`,(0,e.jsx)(n.p,{children:\"With this, let's create a custom realm to handle our users.\"}),`\n`,(0,e.jsxs)(n.h1,{id:\"setting-up-keycloak\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#setting-up-keycloak\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Setting up Keycloak\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"To start Keycloak, you can start it as a standalone application by downloading the binary or you can use the \",(0,e.jsx)(n.a,{href:\"https://www.keycloak.org/getting-started/getting-started-docker\",children:\"Keycloak docker image\"}),\". Today we will be using the docker image to start the application. I have created a simple Keycloak docker-compose file to start Keycloak and expose its port at 8080\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-yaml\",children:(0,e.jsxs)(n.code,{className:\"language-yaml code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"version\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'3.1'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"services\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"keycloak\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"image\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" quay.io/keycloak/keycloak\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`15.0.1\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"ports\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'8080:8080'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"environment\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),` KEYCLOAK_USER=admin\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),` KEYCLOAK_PASSWORD=admin\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now, you can start Keycloak using \",(0,e.jsx)(n.code,{children:\"docker-compose up\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Next, open the page at \",(0,e.jsx)(n.a,{href:\"http://localhost:8080\",children:\"http://localhost:8080\"}),\" click on \\u201CAdministration Console\\u201D and log in using \\u201Cadmin\\u201D as the user and password(as set in the environment variables above). Once you log in, you are already in the master realm.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Let\\u2019s create a new realm. Click on the master realm on the left side and then click add realm as shown in the picture.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Adding realm\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/add-realm.png\",width:\"987\",height:\"425\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Now, Give it a name, I have given it as \\u201CMy-Realm\\u201D\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Example readlm\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/my-realm.png\",width:\"1135\",height:\"506\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Now, we would be using all the default settings here.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Next, let's create a client in the \\u201CClients\\u201D section. We will use this client to communicate with Keycloak from our Spring Cloud Gateway application.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Realm Client Settings\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/create-client.png\",width:\"766\",height:\"363\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Here we give it a client id \\u201Cspring-gateway-client\\u201D and keep the client protocol as \\u201COpenID-connect\\u201D and click save.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Next, we will keep the \\u201CStandard Flow Enabled\\u201D option ON which allows us to use the OAuth2 mechanism. Also, we will set the \\u201CAccess Type\\u201D to \\u201Cconfidential\\u201D, set a \\u201CValid redirect URI\\u201D to \\u201C\",(0,e.jsx)(n.a,{href:\"http://localhost:9090/login/oauth2/code/keycloak%E2%80%9D\",children:\"http://localhost:9090/login/oauth2/code/keycloak\\u201D\"}),\" and can leave the rest of the default settings and save this configuration. The redirect URI refers to our Spring Cloud Gateway application, which will run at 9090.\"]}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Realm Client Configuration\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/client-config.png\",width:\"627\",height:\"832\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Once you, hit save, you will get a new tab called \\u201CCredentials\\u201D. Go to the credentials section and note down the secret value. We would use this value to register this client in our application.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Realm Client Credentials\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/client-secret.png\",width:\"650\",height:\"169\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Next, Let's create a user with the username and password as \\u201Ctest\\u201D.\"}),`\n`,(0,e.jsx)(n.p,{children:\"To do that, go to the \\u201CUsers\\u201D section and click on \\u201CAdd User\\u201D. Here I set the user name as \\u201Ctest\\u201D, first name as \\u201CYour name\\u201D and Lastname as \\u201CLast name\\u201D. Then on clicking save, we get an id generated for the User as seen in the image below. We will fetch this Id in our application after authenticating with Keycloak using OpenId Connect.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Keycloak User\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/new-user.png\",width:\"920\",height:\"673\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Next, Click on the \\u201CCredentials\\u201D tabs and set a password as \\u201Ctest\\u201D with the \\u201Ctemporary\\u201D option turned off.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Keycloak User credentials\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/add-user-password.png\",width:\"759\",height:\"488\"})}),`\n`,(0,e.jsx)(n.p,{children:\"That's it. We have just created a realm with a client and a user. This is the most minimalistic configuration we have done that is enough to start integrating Keycloak with our application.\"}),`\n`,(0,e.jsx)(n.p,{children:\"With this, let\\u2019s create our Spring Cloud Gateway application to integrate the Keycloak client that we just created.\"}),`\n`,(0,e.jsxs)(n.h1,{id:\"creating-an-application-with-spring-cloud-gateway\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#creating-an-application-with-spring-cloud-gateway\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Creating an Application with Spring Cloud Gateway\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Let\\u2019s go to \",(0,e.jsx)(n.a,{href:\"https://start.spring.io\",children:\"https://start.spring.io\"}),\" and create an application with the following dependencies.\"]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Gateway\"}),`\n`,(0,e.jsx)(n.li,{children:\"OAuth2 Client\"}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Once you generate and download the application, we will create a simple RestController as follows:-\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-java\",children:(0,e.jsxs)(n.code,{className:\"language-java code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@RestController\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"public\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"class\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Controller\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@GetMapping\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"/\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"public\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"index\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Principal\"}),\" principal\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" principal\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"getName\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Here we are returning the name (Id of the Keycloak user) from the principal Object which is created by spring security once the user logs in.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Now, let's protect this endpoint with a security configuration.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-java\",children:(0,e.jsxs)(n.code,{className:\"language-java code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@Configuration\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"public\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"class\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"SecurityConfig\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"   \",(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@Bean\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"   \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"public\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"SecurityWebFilterChain\"}),\" springSecurityFilterChain \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"ServerHttpSecurity\"}),\" http\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`        http\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"            \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"authorizeExchange\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"            \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"anyExchange\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"            \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"authenticated\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"         \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"and\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"            \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"oauth2Login\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// to redirect to oauth2 login page.\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" http\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"build\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"   \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Here, we set that, any request that comes in must be authenticated, and in case of a not logged-in user, it should use the OAuth2 login page.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Next, We set the properties to register the Oauth2 Keycloak client in our application.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"setting-application-property-values\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#setting-application-property-values\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Setting Application Property values\"]}),`\n`,(0,e.jsx)(n.p,{children:\"This contains two parts. Setting the provider properties and registering the client information properties.\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Provider\\u2019s properties\\u200A\\u2014\\u200AThe provider of the OAuth2 mechanism i.e the realm.\"}),`\n`,(0,e.jsx)(n.li,{children:\"Client properties\\u200A\\u2014\\u200AThese are the properties of the Keycloak client to communicate with the realm.\"}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.strong,{children:\"Setting Provider Properties\"})}),`\n`,(0,e.jsx)(n.p,{children:\"To set the provider, we need the issuer-URI. For this, you need to go back to your realm setting section and under the \\u201CGeneral\\u201D tab, you have endpoints. Click on the \\u201COpenId Endpoint Configuration\\u201D link and you should get a JSON, containing all the required information. E.g, for the realm we just created, here is a small snippet of the output.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"OpenID Connect configuration endpoint\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/openid-endpoint-configuration.png\",width:\"1021\",height:\"493\"})}),`\n`,(0,e.jsx)(n.p,{children:\"You then set the issuer URI for a provider name called \\u201Cmy-keycloak-provider\\u201D like the following.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-yaml\",children:(0,e.jsxs)(n.code,{className:\"language-yaml code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"spring\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"security\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"oauth2\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"client\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"provider\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"          \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"my-keycloak-provider\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"            \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"issuer-uri\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" http\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\"//localhost\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\"8080/auth/realms/My\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),`Realm\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Note\"}),\": The provider name can be a custom value, but you need to use this exact name while using it in the client registration properties.\"]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.strong,{children:\"Setting Client Registration Properties\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Next, we will set the client registration properties under the registration name \\u201Ckeycloak-spring-gateway-client\\u201D.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-yaml\",children:(0,e.jsxs)(n.code,{className:\"language-yaml code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"spring\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"security\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"oauth2\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"client\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"provider\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"          \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"my-keycloak-provider\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"            \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"issuer-uri\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" http\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\"//localhost\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\"8080/auth/realms/My\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),`Realm\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"registration\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"keycloak-spring-gateway-client\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"provider\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" my\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\"keycloak\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),`provider\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"client-id\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" spring\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\"gateway\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),`client\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"client-secret\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" fc36fd82\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\"7042\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\"4287\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),\"aef0\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"-\"}),`e9f8603abd02\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"authorization-grant-type\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),` authorization_code\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"redirect-uri\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'{baseUrl}/login/oauth2/code/keycloak'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"server\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token key atrule\",children:\"port\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"9090\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Note\"}),\": The client registration name can be any custom name. It is used to just identify the client in your application.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Here, we set the client Id we created in Keycloak and the client secret from the client\\u2019s \\u201Ccredentials\\u201D tab in Keycloak. We also set the provider name, from the properties before, and the redirect URI which we had registered while creating the client in the Keycloak. Also, Since we will be using the authorization code grant type for the OAuth2 flow, we set the authorization grant type to \\u201Cauthorization_code\\u201D.\"}),`\n`,(0,e.jsx)(n.p,{children:\"With all the configuration done, Let\\u2019s start the application.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"starting-the-application\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#starting-the-application\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Starting the application\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Since we set \",(0,e.jsx)(n.code,{children:\"server.port=9090\"}),\", the application starts at 9090. When we open \",(0,e.jsx)(n.a,{href:\"http://localhost:9090\",children:\"http://localhost:9090\"}),\" on the web browser, It immediately redirects to the login page from Keycloak as we are querying the root resource \",(0,e.jsx)(n.code,{children:\"/\"}),\".\"]}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"User Login\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/user-login-page.png\",width:\"924\",height:\"588\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Here, enter the username and password \\u201Ctest\\u201D to log in. Since the authentication is now complete, The principal object is filled with the user details, and the user Id of the \\u201Ctest\\u201D user from Keycloak is returned.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"application output\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/user-id.png\",width:\"659\",height:\"146\"})}),`\n`,(0,e.jsx)(n.p,{children:\"This is the same Id that was generated by Keycloak when we created the user.\"}),`\n`,(0,e.jsxs)(n.h1,{id:\"understanding-the-oauth2-open-id-connect-flow\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#understanding-the-oauth2-open-id-connect-flow\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Understanding the OAuth2 Open ID Connect Flow\"]}),`\n`,(0,e.jsx)(n.p,{children:\"In the diagram below, I have summarised the flow of how the OAuth2 Connect ID flow works. It starts off with the user requesting a resource, then authenticates itself and gets a response once he is identified.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(i,{alt:\"Oauth2 Authorization Flow with Keycloak\",src:\"/static/images/2021/spring-cloud-gateway-with-keycloak/oauth2-oidc.png\",width:\"1655\",height:\"1394\"})}),`\n`,(0,e.jsx)(n.p,{children:\"The OAuth2 flow is up to the request to get the access token. Once you get the access token, the application makes a request to get the user details. This part belongs to OpenId Connect to get the identity of the user.\"}),`\n`,(0,e.jsxs)(n.h1,{id:\"conclusion\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#conclusion\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),`\n`,(0,e.jsx)(n.p,{children:\"So with this, we were able to integrate the Spring Cloud Gateway with Keycloak and set up OAuth2 OpenId Connect to authenticate the user.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"I have uploaded the code integrating Keycloak on \",(0,e.jsx)(n.a,{href:\"https://github.com/amrutprabhu/keycloak-spring-cloud-gateway-and-resource-server\",children:\"GitHub\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Wait... There is more to come up.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Next, we will integrate a backend service to this API Gateway as an OAuth2 resource server and check the user for authorization. This will be in the next article I am currently working on.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"So, subscribe to my newsletter and also follow me on \",(0,e.jsx)(n.a,{href:\"https://twitter.com/amrutprabhu42\",children:\"Twitter\"}),\" to know once it\\u2019s published.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Enjoy!!\"})]})}}var v=f;function b(a,t){throw new Error(\"Expected \"+(t?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return I;})();\n;return Component;","toc":[{"value":"Introduction","url":"#introduction","depth":1},{"value":"Understanding Keycloak Concepts","url":"#understanding-keycloak-concepts","depth":1},{"value":"Setting up Keycloak","url":"#setting-up-keycloak","depth":1},{"value":"Creating an Application with Spring Cloud Gateway","url":"#creating-an-application-with-spring-cloud-gateway","depth":1},{"value":"Setting Application Property values","url":"#setting-application-property-values","depth":2},{"value":"Starting the application","url":"#starting-the-application","depth":2},{"value":"Understanding the OAuth2 Open ID Connect Flow","url":"#understanding-the-oauth2-open-id-connect-flow","depth":1},{"value":"Conclusion","url":"#conclusion","depth":1}],"frontMatter":{"readingTime":{"text":"9 min read","minutes":8.765,"time":525900,"words":1753},"slug":"2021/spring-cloud-gateway-keycloak-oauth2-openid-connect","fileName":"2021/spring-cloud-gateway-keycloak-oauth2-openid-connect.md","title":"Spring Cloud Gateway Keycloak OAuth2 OIDC Integration","author":"Amrut Prabhu","categories":"","tags":["Spring Boot","Java","Gateway","Keycloak","Oauth2","OpenId Connect"],"photo-credits":"","applaud-link":"2021/spring-gateway-oauth2-keycloak.json","date":"2021-09-02T00:00:00.000Z","draft":false,"summary":"In this article, we would be looking at how we can integrate Keycloak with Spring Cloud Gateway using the OAuth2 OpenId Connect (OIDC).","imageUrl":"/static/images/2021/spring-cloud-gateway-with-keycloak/cover.jpg","actualUrl":"2021/spring-cloud-gateway-keycloak-oauth2-openid-connect","customUrl":"spring-cloud-gateway-keycloak-oauth2-openid-connect"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.875,"time":52500,"words":175},"slug":["default"],"fileName":"default.md","name":"Amrut Prabhu","avatar":"/static/images/avatar-small.jpg","avatarBig":"/static/images/avatar-big.jpg","occupation":"Staff Engineer","company":"Personal","email":"address@yoursite.com","twitter":"https://twitter.com/amrutprabhu42","linkedin":"https://www.linkedin.com/in/amrut-prabhu-722baa65/","github":"https://github.com/amrutprabhu","customUrl":"default","actualUrl":"default","date":null}],"prev":{"title":"Distributed Tracing with Spring Cloud Sleuth And Zipkin","author":"Amrut Prabhu","tags":["Spring Boot","Java","Distributed Tracing","Zipkin"],"photo-credits":"https://unsplash.com/photos/d9ILr-dbEdg","applaud-link":"2021/distributed-tracing-with-spring-zipkin.json","date":"2021-08-19T00:00:00.000Z","draft":false,"summary":"We would learn how we can implement distributed tracing in a Spring Boot Application and understand the key concepts of distributed tracing","imageUrl":"/static/images/2021/distributed-tracing-with-zipkin/cover.jpg","actualUrl":"2021/distributed-tracing-with-spring-cloud-sleuth","customUrl":"distributed-tracing-with-spring-cloud-sleuth","slug":"distributed-tracing-with-spring-cloud-sleuth"},"next":{"title":"Spring Cloud Gateway — Resource Server with Keycloak RBAC","author":"Amrut Prabhu","categories":"","tags":["Spring Boot","Java","Gateway","Keycloak","Oauth2","OpenId Connect","Resource Server"],"image":"2021/spring-cloud-gateway-with-resource-server/cover.jpg","photo-credits":null,"applaud-link":"2021/spring-gateway-keycloak-resource-server.json","date":"2021-09-16T00:00:00.000Z","draft":false,"summary":"In this article, we will be exploring how we can integrate a resource server with an API gateway that is integrated with Keycloak and enable role-based access control (RBAC)","imageUrl":"/static/images/2021/spring-cloud-gateway-with-resource-server/cover.jpg","actualUrl":"2021/spring-cloud-gateway-keycloak-rbac-resource-server","customUrl":"spring-cloud-gateway-keycloak-rbac-resource-server","slug":"spring-cloud-gateway-keycloak-rbac-resource-server"}},"__N_SSG":true}