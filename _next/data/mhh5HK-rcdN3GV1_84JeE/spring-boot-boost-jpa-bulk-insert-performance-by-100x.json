{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var i=a=>c(a,\"__esModule\",{value:!0});var N=(a,s)=>()=>(s||a((s={exports:{}}).exports,s),s.exports),k=(a,s)=>{i(a);for(var t in s)c(a,t,{get:s[t],enumerable:!0})},g=(a,s,t)=>{if(s&&typeof s==\"object\"||typeof s==\"function\")for(let n of p(s))!u.call(a,n)&&n!==\"default\"&&c(a,n,{get:()=>s[n],enumerable:!(t=h(s,n))||t.enumerable});return a},b=a=>g(i(c(a!=null?d(m(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var l=N((S,o)=>{o.exports=_jsx_runtime});var j={};k(j,{default:()=>y,frontmatter:()=>f});var e=b(l()),f={title:\"Spring Boot: Boost JPA Bulk Insert Performance by 100x\",author:\"Amrut Prabhu\",categories:\"\",tags:[\"JPA\",\"mysql\",\"database\",\"Spring Boot\",\"Java\"],image:\"2021-01-24/jpa-performance-boost.jpg\",\"photo-credits\":\"https://unsplash.com/photos/V6G6PZWPASo\",\"applaud-link\":\"spring-boot-boost-jpa-insert.json\",date:\"2021-01-24\",draft:!1,summary:\"Here we see how we can boost the bulk insert performance using JPA to insert large number of records into a database\",imageUrl:\"/static/images/2021/boost-jpa-bulk-insert/jpa-performance-boost.jpg\",actualUrl:\"auto-generated\",customUrl:\"auto-generated\"};function w(a={}){let{wrapper:s}=a.components||{};return s?(0,e.jsx)(s,Object.assign({},a,{children:(0,e.jsx)(t,{})})):t();function t(){let n=Object.assign({p:\"p\",code:\"code\",strong:\"strong\",h2:\"h2\",a:\"a\",span:\"span\",pre:\"pre\",div:\"div\"},a.components),{Image:r}=n;return r||v(\"Image\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"I was facing a problem where I wanted to insert millions of records into the database, which needed to be imported from the file.\"}),`\n`,(0,e.jsx)(n.p,{children:\"So, I did some research around this, and I would like to share with you what I found which helped me improve the insert records throughput by nearly 100 times.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Initially, when I was just trying to do bulk insert using spring JPA\\u2019s \",(0,e.jsx)(n.code,{children:\"saveAll\"}),\" method, I was getting a performance of about 185 seconds per 10,000 records. After doing the following changes below, the performance to insert 10,000 records was just in 4.3 seconds.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Yes, \",(0,e.jsx)(n.strong,{children:\"4.3\"}),\" Seconds for \",(0,e.jsx)(n.strong,{children:\"10k\"}),\" records.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"So, to achieve this, I had to change the way I was inserting data.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"1-change-the-number-of-records-while-inserting\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#1-change-the-number-of-records-while-inserting\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"1. Change the Number of Records While Inserting\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"When I was inserting initially, I was pushing all the 10k records from the list directly by calling the \",(0,e.jsx)(n.code,{children:\"saveAll\"}),\" method. I changed this to the batch size of 30. You could also increase the batch size to even 60, but it doesn\\u2019t half the time taken to insert records. See the table below.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"For this, you need to set the hibernate property \",(0,e.jsx)(n.code,{children:\"batch_size=30\"}),\" .\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-properties\",children:(0,e.jsx)(n.code,{className:\"language-properties code-highlight\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"spring.jpa.properties.hibernate.jdbc.batch_size\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token attr-value\",children:\"30\"}),`\n`]})})}),`\n`,(0,e.jsx)(n.p,{children:\"Then, I added the following connection string properties:\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-properties\",children:(0,e.jsxs)(n.code,{className:\"language-properties code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"cachePrepStmts\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token attr-value\",children:\"true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"useServerPrepStmts\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token attr-value\",children:\"true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"rewriteBatchedStatements\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token attr-value\",children:\"true\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`e.g\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"jdbc\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),(0,e.jsx)(n.span,{className:\"token attr-value\",children:\"mysql://localhost:3306/BOOKS_DB?serverTimezone=UTC\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"                                        &cachePrepStmts\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token attr-value\",children:\"true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"                                        &useServerPrepStmts\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token attr-value\",children:\"true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token attr-name\",children:\"                                        &rewriteBatchedStatements\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"=\"}),(0,e.jsx)(n.span,{className:\"token attr-value\",children:\"true\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"2-send-the-batched-records\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#2-send-the-batched-records\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"2. Send the Batched Records\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Next, I changed the code for inserting, so that \",(0,e.jsx)(n.code,{children:\"saveAll\"}),\" methods get batch sizes of 30 to insert as per what we also set in the properties file. A very crude implementation of something like this:\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-java\",children:(0,e.jsxs)(n.code,{className:\"language-java code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"for\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token keyword\",children:\"int\"}),\" i \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"0\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" i \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\" totalObjects\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),\" i \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" i \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"+\"}),\" batchSize\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"if\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\" i\",(0,e.jsx)(n.span,{className:\"token operator\",children:\"+\"}),\" batchSize \",(0,e.jsx)(n.span,{className:\"token operator\",children:\">\"}),\" totalObjects\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"List\"}),(0,e.jsxs)(n.span,{className:\"token generics\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Book\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\">\"})]}),\" books1 \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" books\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"subList\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"i\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" totalObjects \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"-\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        repository\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"saveAll\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"books1\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"break\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"List\"}),(0,e.jsxs)(n.span,{className:\"token generics\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"<\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Book\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\">\"})]}),\" books1 \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" books\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"subList\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"i\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" i \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"+\"}),\" batchSize\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    repository\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"saveAll\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"books1\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"This reduced the time by a little; it dropped from 185 secs to 153 Secs. That's approximately an 18% improvement.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"3-change-the-id-generation-strategy\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#3-change-the-id-generation-strategy\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"3. Change the ID Generation Strategy\"]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"This made a major impact\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Initially, I was using the \",(0,e.jsx)(n.code,{children:\"@GeneratedValue\"}),\" annotation with strategy i.e \",(0,e.jsx)(n.code,{children:\"GenerationType.IDENTITY\"}),\" on my entity class.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Hibernate has a disabled batch update with this strategy because it has to make a select call to get the id from the database to insert each row. You can read more about it \",(0,e.jsx)(n.a,{href:\"https://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch15.html\",children:\"here\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"I changed the strategy to \",(0,e.jsx)(n.code,{children:\"SEQUENCE\"}),\" and provided a sequence generator.\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-java\",children:(0,e.jsxs)(n.code,{className:\"language-java code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"public\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"class\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Book\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@Id\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@GeneratedValue\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"strategy \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" SEQUENCE\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" generator \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"seqGen\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token annotation punctuation\",children:\"@SequenceGenerator\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"name \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"seqGen\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" sequenceName \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"seq\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" initialValue \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"private\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Long\"}),\" id\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"This drastically changed the insert performance, as Hibernate was able to leverage bulk insert.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"From the previous performance improvement of 153 secs, the time to insert 10k records reduced to only \",(0,e.jsx)(n.strong,{children:\"9 secs\"}),\". That's an increase in performance by nearly \",(0,e.jsx)(n.strong,{children:\"95%.\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:\"Note: MySQL doesn\\u2019t support creating sequences\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"To get around this, I created a table with the name of the sequence having a single field called \",(0,e.jsx)(n.code,{children:\"next_val\"}),\". Then, I added a single row with an initial value.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"For the above sequence, I created the following:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"language-sqlite-sql code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:\"CREATE TABLE `seq` (\\n\"}),(0,e.jsx)(n.span,{className:\"code-line\",children:\"  `next_val` bigint(20) DEFAULT NULL\\n\"}),(0,e.jsx)(n.span,{className:\"code-line\",children:`);\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:\"INSERT INTO `seq` (`next_val`) VALUES(1);\\n\"})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Hibernate then used the table below as a sequence generator.\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(r,{alt:\"jpa-insert-performance-statistics\",src:\"/static/images/2021/boost-jpa-bulk-insert/stats.png\",width:\"1159\",height:\"484\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The most optimal batch size for my case was \",(0,e.jsx)(n.strong,{children:\"1,000\"}),\", which took around \",(0,e.jsx)(n.strong,{children:\"4.39\"}),\" secs for 10K records. After that, I saw the performance degrading, as you can see in the graph below.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Here are the stats I got:\"}),`\n`,(0,e.jsx)(n.div,{children:(0,e.jsx)(r,{alt:\"jpa-insert-performance-statistics\",src:\"/static/images/2021/boost-jpa-bulk-insert/stats-table.png\",width:\"222\",height:\"195\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"As always, you can find the code on my \",(0,e.jsx)(n.a,{href:\"https://github.com/amrutprabhu/spring-boot-jpa-bulk-insert-performance\",children:\"GitHub repo.\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"Enjoy!!\"})]})}}var y=w;function v(a,s){throw new Error(\"Expected \"+(s?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return j;})();\n;return Component;","toc":[{"value":"1. Change the Number of Records While Inserting","url":"#1-change-the-number-of-records-while-inserting","depth":2},{"value":"2. Send the Batched Records","url":"#2-send-the-batched-records","depth":2},{"value":"3. Change the ID Generation Strategy","url":"#3-change-the-id-generation-strategy","depth":2}],"frontMatter":{"readingTime":{"text":"4 min read","minutes":3.91,"time":234600,"words":782},"slug":"2020/spring-boot-boost-jpa-bulk-insert-performance-by-100x","fileName":"2020/spring-boot-boost-jpa-bulk-insert-performance-by-100x.md","title":"Spring Boot: Boost JPA Bulk Insert Performance by 100x","author":"Amrut Prabhu","categories":"","tags":["JPA","mysql","database","Spring Boot","Java"],"image":"2021-01-24/jpa-performance-boost.jpg","photo-credits":"https://unsplash.com/photos/V6G6PZWPASo","applaud-link":"spring-boot-boost-jpa-insert.json","date":"2021-01-24T00:00:00.000Z","draft":false,"summary":"Here we see how we can boost the bulk insert performance using JPA to insert large number of records into a database","imageUrl":"/static/images/2021/boost-jpa-bulk-insert/jpa-performance-boost.jpg","actualUrl":"2020/spring-boot-boost-jpa-bulk-insert-performance-by-100x","customUrl":"spring-boot-boost-jpa-bulk-insert-performance-by-100x"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.875,"time":52500,"words":175},"slug":["default"],"fileName":"default.md","name":"Amrut Prabhu","avatar":"/static/images/avatar-small.jpg","avatarBig":"/static/images/avatar-big.jpg","occupation":"Staff Engineer","company":"Personal","email":"address@yoursite.com","twitter":"https://twitter.com/amrutprabhu42","linkedin":"https://www.linkedin.com/in/amrut-prabhu-722baa65/","github":"https://github.com/amrutprabhu","customUrl":"default","actualUrl":"default","date":null}],"prev":{"title":"Spring Boot: Handle AWS RDS JDBC password change or rotation without restarting","author":"Amrut Prabhu","categories":"","tags":["AWS","RDS","Secrets manager","Spring Boot","Java"],"image":"2020-11-05/aws-secrets-rotation.jpg","photo-credits":"https://unsplash.com/photos/B_hAlVqataE","applaud-link":"spring-boot-aws-rds-secrets-rotation.json","date":"2020-11-05T00:00:00.000Z","draft":false,"summary":"Here, we see how we can handle AWS RDS secrets rotation without restarting your Spring Boot application","imageUrl":"/static/images/2020/aws-secrets-rotation/cover.jpg","actualUrl":"2020/spring-boot-aws-rds-jdbc-secrets-rotation-without-restart","customUrl":"spring-boot-aws-rds-jdbc-secrets-rotation-without-restart","slug":"spring-boot-aws-rds-jdbc-secrets-rotation-without-restart"},"next":{"title":"Spring Boot: API First Design","author":"Amrut Prabhu","categories":"","tags":["Spring Boot","Java","Open API 3","Swagger"],"image":"blog-api-first/cover.jpg","photo-credits":"https://unsplash.com/photos/bb-ys3oFql4","applaud-link":"spring-boot-api-first-design.json","date":"2021-03-21T00:00:00.000Z","draft":false,"summary":"Here we take a practical approach to API first design with an example using Open API 3 specification","imageUrl":"/static/images/2021/blog-api-first/cover.jpg","actualUrl":"2020/spring-boot-api-first-design","customUrl":"spring-boot-api-first-design","slug":"spring-boot-api-first-design"}},"__N_SSG":true}