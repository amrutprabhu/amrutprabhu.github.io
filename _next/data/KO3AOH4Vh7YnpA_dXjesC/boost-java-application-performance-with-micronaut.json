{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var l=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var c=a=>r(a,\"__esModule\",{value:!0});var g=(a,i)=>()=>(i||a((i={exports:{}}).exports,i),i.exports),f=(a,i)=>{c(a);for(var n in i)r(a,n,{get:i[n],enumerable:!0})},b=(a,i,n)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let t of d(i))!m.call(a,t)&&t!==\"default\"&&r(a,t,{get:()=>i[t],enumerable:!(n=u(i,t))||n.enumerable});return a},v=a=>b(c(r(a!=null?l(p(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var h=g((j,s)=>{s.exports=_jsx_runtime});var k={};f(k,{default:()=>y,frontmatter:()=>w});var e=v(h()),w={title:\"Boost Java Application Performance With Micronaut Native Image\",author:\"Amrut Prabhu\",categories:\"\",tags:[\"Spring Boot\",\"Micronaut\",\"Native Image\",\"Java\"],image:\"micronaut-native-image-graalvm/micronaut-native-image-graalvm.jpg\",\"photo-credits\":null,\"applaud-link\":\"boost-java-application-performance-with-micronaut.json\",date:\"2021-07-22\",draft:!1,summary:\"In this article, we would see how we can achieve an incredibly quick start-up time for a Java application\",imageUrl:\"/static/images/2021/micronaut-native-image-graalvm/micronaut-native-image-graalvm.jpg\",actualUrl:\"auto-generated\",customUrl:\"auto-generated\"};function x(a={}){let{wrapper:i}=a.components||{};return i?(0,e.jsx)(i,Object.assign({},a,{children:(0,e.jsx)(n,{})})):n();function n(){let t=Object.assign({p:\"p\",strong:\"strong\",h1:\"h1\",a:\"a\",span:\"span\",div:\"div\",pre:\"pre\",code:\"code\",h2:\"h2\"},a.components),{Image:o}=t;return o||M(\"Image\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.p,{children:\"In this article, I would show how you can achieve an incredibly quick start-up time for your java application in the order of around 90 ms.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Yes, \",(0,e.jsx)(t.strong,{children:\"90 milliseconds\"}),\".\"]}),`\n`,(0,e.jsxs)(t.h1,{id:\"introduction\",children:[(0,e.jsx)(t.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#introduction\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Introduction\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Nowadays, we are all familiar with spring and spring boot to provide the best features of dependency inject, Inversion of control (IOC), Aspect Oriented Programming (AOP). But to provide these features, spring needs to do a bunch of stuff behind the scenes, such as wiring of objects, proxying objects, etc which takes some time when the application starts up.\"}),`\n`,(0,e.jsx)(t.p,{children:\"With applications becoming cloud-native, we want quick start-up time and better memory utilization.\"}),`\n`,(0,e.jsx)(t.p,{children:\"Micronaut is a framework that provides the above features, including the advantage of faster start-up time and lesser memory footprint by making use of Ahead Of Time (AOT) compilation.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can read my previous article on \\u201C\",(0,e.jsx)(t.a,{href:\"/springboot-developers-guide-to-micronaut.html\",children:\"A Spring Boot developer\\u2019s guide to Micronaut\"}),\", wherein I explain the basic concepts of Micronaut and also create a Micronaut CRUD application example.\"]}),`\n`,(0,e.jsx)(t.p,{children:\"In this article, we would be talking about how we can boost the start-up performance using the Micronaut framework for the same example application from the previous article.\"}),`\n`,(0,e.jsxs)(t.h1,{id:\"performance-out-of-the-box\",children:[(0,e.jsx)(t.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#performance-out-of-the-box\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Performance out of the box\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Since Micronaut uses AOT compilation, this technique helps to reduce the start-up time. A normal CRUD application, which uses JPA with Hibernate to communicate with MYSQL takes about 2 secs to starts up.\"}),`\n`,(0,e.jsx)(t.p,{children:\"But there is a catch here. The application may start up in 2 secs, but the first REST call to the application takes a bit of time. This is because of the lazy initialization of the controller resource. Once this happens, the subsequent requests are pretty quick.\"}),`\n`,(0,e.jsx)(t.div,{children:(0,e.jsx)(o,{alt:\"Micronaut Statistics\",src:\"/static/images/2021/spring-boot-micronaut-guide/stats.png\",width:\"602\",height:\"49\"})}),`\n`,(0,e.jsx)(t.p,{children:\"Now let's try to tune this to achieve higher performance.\"}),`\n`,(0,e.jsxs)(t.h1,{id:\"creating-a-native-image\",children:[(0,e.jsx)(t.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#creating-a-native-image\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Creating a Native Image\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"To obtain even better performance, we would be creating a native image of the application, using a special JVM called the \",(0,e.jsx)(t.a,{href:\"https://www.graalvm.org/\",children:\"GraalVM\"}),\".\"]}),`\n`,(0,e.jsx)(t.p,{children:\"GraalVM provides this mechanism that helps to create a native image of the application which you can execute as a standalone executable. The build process builds the executable with all the required dependencies such that you don't need the JVM to run the application.\"}),`\n`,(0,e.jsx)(t.p,{children:\"To build this native image, I have used GraalVM CE 21.1.0 (build 11.0.11) which is for Java 11. We can then run the following command to build the image.\"}),`\n`,(0,e.jsx)(t.pre,{className:\"language-bash\",children:(0,e.jsx)(t.code,{className:\"language-bash code-highlight\",children:(0,e.jsxs)(t.span,{className:\"code-line\",children:[\"./mvnw clean package -Dpackaging\",(0,e.jsx)(t.span,{className:\"token operator\",children:\"=\"}),`native-image\n`]})})}),`\n`,(0,e.jsx)(t.p,{children:\"This will start building the native image and the build time would take around 3\\u20135 mins depending on the system you have.\"}),`\n`,(0,e.jsx)(t.p,{children:\"Once the build finishes, there will be an executable created in the target folder. You can execute it as any other executable and you don't need a JVM to run it.\"}),`\n`,(0,e.jsxs)(t.h2,{id:\"performance-statistics\",children:[(0,e.jsx)(t.a,{\"aria-hidden\":\"true\",tabIndex:\"-1\",href:\"#performance-statistics\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Performance Statistics\"]}),`\n`,(0,e.jsx)(t.p,{children:\"After executing the native image, I got the following statistics for a Micronaut JPA application with CRUD capabilities.\"}),`\n`,(0,e.jsx)(t.div,{children:(0,e.jsx)(o,{alt:\"Micronaut Native Image Statistics\",src:\"/static/images/2021/micronaut-native-image-graalvm/micronaut-native-image-statistics.png\",width:\"649\",height:\"111\"})}),`\n`,(0,e.jsx)(t.p,{children:\"This is a huge performance boost in start-up and response time compared to the application running on a JVM.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can try this out by yourself, I have uploaded the code to \",(0,e.jsx)(t.a,{href:\"https://github.com/amrutprabhu/micronaut-workout/tree/master/MicronautApp\",children:\"GitHub\"}),\".\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"In my next article, I would be talking about an application's performance with Micronaut on AWS Lambda. You can read about it here \",(0,e.jsx)(t.a,{href:\"https://refactorfirst.com/micronaut-jpa-aws-lambda-function.html\",children:'\"Micronaut JPA Function Performance on AWS Lambda\"'}),\".\"]})]})}}var y=x;function M(a,i){throw new Error(\"Expected \"+(i?\"component\":\"object\")+\" `\"+a+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k;})();\n;return Component;","toc":[{"value":"Introduction","url":"#introduction","depth":1},{"value":"Performance out of the box","url":"#performance-out-of-the-box","depth":1},{"value":"Creating a Native Image","url":"#creating-a-native-image","depth":1},{"value":"Performance Statistics","url":"#performance-statistics","depth":2}],"frontMatter":{"readingTime":{"text":"4 min read","minutes":3.055,"time":183300,"words":611},"slug":"2020/boost-java-application-performance-with-micronaut","fileName":"2020/boost-java-application-performance-with-micronaut.md","title":"Boost Java Application Performance With Micronaut Native Image","author":"Amrut Prabhu","categories":"","tags":["Spring Boot","Micronaut","Native Image","Java"],"image":"micronaut-native-image-graalvm/micronaut-native-image-graalvm.jpg","photo-credits":null,"applaud-link":"boost-java-application-performance-with-micronaut.json","date":"2021-07-22T00:00:00.000Z","draft":false,"summary":"In this article, we would see how we can achieve an incredibly quick start-up time for a Java application","imageUrl":"/static/images/2021/micronaut-native-image-graalvm/micronaut-native-image-graalvm.jpg","actualUrl":"2020/boost-java-application-performance-with-micronaut","customUrl":"boost-java-application-performance-with-micronaut"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.875,"time":52500,"words":175},"slug":["default"],"fileName":"default.md","name":"Amrut Prabhu","avatar":"/static/images/avatar-small.jpg","avatarBig":"/static/images/avatar-big.jpg","occupation":"Staff Engineer","company":"Personal","email":"address@yoursite.com","twitter":"https://twitter.com/amrutprabhu42","linkedin":"https://www.linkedin.com/in/amrut-prabhu-722baa65/","github":"https://github.com/amrutprabhu","customUrl":"default","actualUrl":"default","date":null}],"prev":{"title":"A SpringBoot Developer's Guide To Micronaut","author":"Amrut Prabhu","categories":"","tags":["Spring Boot","Micronaut","Native Image","Java"],"image":"spring-boot-micronaut-guide/spring-boot-micronaut.jpg","photo-credits":null,"applaud-link":"springboot-developers-guide-to-micronaut.json","date":"2021-07-21T00:00:00.000Z","draft":false,"summary":"Here is a guide for Spring Boot developers to get started with Micronaut framework","imageUrl":"/static/images/2021/spring-boot-micronaut-guide/spring-boot-micronaut.jpg","actualUrl":"2020/springboot-developers-guide-to-micronaut","customUrl":"springboot-developers-guide-to-micronaut","slug":"springboot-developers-guide-to-micronaut"},"next":{"title":"Micronaut JPA Function Performance on AWS Lambda","author":"Amrut Prabhu","categories":"","tags":["Micronaut","AWS Lambda","AWS","Native Image","Java"],"image":"micronaut-jpa-aws-lambda-function/cover.jpg","photo-credits":null,"applaud-link":"micronaut-jpa-aws-lambda-function.json","date":"2021-07-29T00:00:00.000Z","draft":false,"summary":"In this article, we would be looking into some performance statistics when running a Micronaut Application on a JVM runtime versus a Native image on AWS Lambda function","imageUrl":"/static/images/2021/micronaut-jpa-aws-lambda-function/cover.jpg","actualUrl":"2020/micronaut-jpa-aws-lambda-function","customUrl":"micronaut-jpa-aws-lambda-function","slug":"micronaut-jpa-aws-lambda-function"}},"__N_SSG":true}